name: Create Release with Compiled Binaries, Python + JS bindings
on:
  workflow_dispatch:
    inputs:
      tag:
        description: "The tag to release"
        required: true
  push:
    tags:
      - "*"
jobs:
  # Create release tag 
  create-release:
    name: create-release
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')

    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url}}
      ezkl_version: ${{ env.EZKL_VERSION }}

    steps:
      - name: Get release version from tag
        shell: bash
        run: |
          echo "EZKL_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "version is: ${{ env.EZKL_VERSION }}"

      - name: Create Github Release
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.RELEASE_TOKEN }}
          tag_name: ${{ env.EZKL_VERSION }}

  # CLI/BINARIES BUILD AND PUBLISH

  build-release:
    name: build-release
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS: ""
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
      PCRE2_SYS_STATIC: 1
    strategy:
      matrix:
        build: [windows-msvc, macos, macos-aarch64, linux-musl, linux-gnu]
        include:
          - build: windows-msvc
            os: windows-latest
            rust: nightly-2023-06-27
            target: x86_64-pc-windows-msvc
          - build: macos
            os: macos-13
            rust: nightly-2023-06-27
            target: x86_64-apple-darwin
          - build: macos-aarch64
            os: macos-13
            rust: nightly-2023-06-27
            target: aarch64-apple-darwin
          - build: linux-musl
            os: ubuntu-22.04
            rust: nightly-2023-06-27
            target: x86_64-unknown-linux-musl
          - build: linux-gnu
            os: ubuntu-22.04
            rust: nightly-2023-06-27
            target: x86_64-unknown-linux-gnu

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get release version from tag
        shell: bash
        run: |
          echo "EZKL_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "version is: ${{ env.EZKL_VERSION }}"

      - name: Set Cargo.toml version to match github tag
        shell: bash
        run: |
          mv Cargo.toml Cargo.toml.orig
          sed "s/0\\.0\\.0/${EZKL_VERSION//v}/" Cargo.toml.orig >Cargo.toml
          mv Cargo.lock Cargo.lock.orig
          sed "s/0\\.0\\.0/${EZKL_VERSION//v}/" Cargo.lock.orig >Cargo.lock

      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update && sudo apt-get install -y musl-tools
          fi

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly
        with:
          target: ${{ matrix.target }}

      - name: Install Rust targets
        run: rustup target add ${{ matrix.target }}

      - name: Use Cross
        shell: bash
        run: |
          cargo install cross -Z sparse-registry
          if [[ "${{ matrix.os }}" == "macos-13" ]]; then
            echo "CC=clang" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            echo "CC=gcc" >> $GITHUB_ENV
          fi
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        run: ${{ env.CARGO }} build --release ${{ env.TARGET_FLAGS }} -Z sparse-registry

      - name: Strip release binary
        if: matrix.build != 'windows-msvc'
        run: strip "target/${{ matrix.target }}/release/ezkl"

      - name: Strip release binary (Windows)
        if: matrix.build == 'windows-msvc'
        run: strip "target/${{ matrix.target }}/release/ezkl.exe"

      - name: Build archive
        if: matrix.build != 'win-msvc'
        shell: bash
        run: |
          mkdir -p build-artifacts
          tar czvf build-artifacts/ezkl-${{ matrix.build }}.tar.gz -C "target/${{ matrix.target }}/release" ezkl
          echo "ASSET=build-artifacts/ezkl-${{ matrix.build }}.tar.gz" >> $GITHUB_ENV

      - name: Build archive (Windows)
        if: matrix.build == 'win-msvc'
        shell: bash
        run: |
          mkdir -p build-artifacts
          powershell.exe -Command "Compress-Archive -Path 'target/${{ matrix.target }}/release/ezkl.exe' -DestinationPath 'build-artifacts/ezkl-win.zip'"
          echo "ASSET=build-artifacts/ezkl-win.zip" >> $GITHUB_ENV

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
  
  # BUILD AND PUBLISH PYHON BINDINGS

  macos:
    runs-on: macos-latest
    needs: ["build-release"]
    strategy:
      matrix:
        target: [x86_64, universal2-apple-darwin]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
          architecture: x64

      - name: Get release version from tag
        shell: bash
        run: |
          echo "EZKL_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "version is: ${{ env.EZKL_VERSION }}"
  
      - name: Set Cargo.toml version to match github tag
        shell: bash
        run: |
          mv Cargo.toml Cargo.toml.orig
          sed "s/0\\.0\\.0/${EZKL_VERSION//v}/" Cargo.toml.orig >Cargo.toml
          mv Cargo.lock Cargo.lock.orig
          sed "s/0\\.0\\.0/${EZKL_VERSION//v}/" Cargo.lock.orig >Cargo.lock
  

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2023-06-27
          override: true
          components: rustfmt, clippy

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --features python-bindings
      - name: Install built wheel
        run: |
          pip install ezkl --no-index --find-links dist --force-reinstall
          python -c "import ezkl"

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
  
  windows:
    runs-on: windows-latest
    needs: ["build-release"]
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
          architecture: ${{ matrix.target }}

      - name: Get release version from tag
        shell: bash
        run: |
          echo "EZKL_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "version is: ${{ env.EZKL_VERSION }}"
  
      - name: Set Cargo.toml version to match github tag
        shell: bash
        run: |
          mv Cargo.toml Cargo.toml.orig
          sed "s/0\\.0\\.0/${EZKL_VERSION//v}/" Cargo.toml.orig >Cargo.toml
          mv Cargo.lock Cargo.lock.orig
          sed "s/0\\.0\\.0/${EZKL_VERSION//v}/" Cargo.lock.orig >Cargo.lock

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2023-06-27
          override: true
          components: rustfmt, clippy

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --features python-bindings
      - name: Install built wheel
        run: |
          pip install ezkl --no-index --find-links dist --force-reinstall
          python -c "import ezkl"

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  linux:
    runs-on: ubuntu-latest
    needs: ["build-release"]
    strategy:
      matrix:
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
          architecture: x64

      - name: Get release version from tag
        shell: bash
        run: |
          echo "EZKL_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "version is: ${{ env.EZKL_VERSION }}"
  
      - name: Set Cargo.toml version to match github tag
        shell: bash
        run: |
          mv Cargo.toml Cargo.toml.orig
          sed "s/0\\.0\\.0/${EZKL_VERSION//v}/" Cargo.toml.orig >Cargo.toml
          mv Cargo.lock Cargo.lock.orig
          sed "s/0\\.0\\.0/${EZKL_VERSION//v}/" Cargo.lock.orig >Cargo.lock

      - name: Install required libraries
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y openssl pkg-config libssl-dev

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist --features python-bindings

      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install ezkl --no-index --find-links dist --force-reinstall
          python -c "import ezkl"

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  musllinux:
    runs-on: ubuntu-latest
    needs: ["build-release"]
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7
          architecture: x64

      - name: Get release version from tag
        shell: bash
        run: |
          echo "EZKL_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "version is: ${{ env.EZKL_VERSION }}"
  
      - name: Set Cargo.toml version to match github tag
        shell: bash
        run: |
          mv Cargo.toml Cargo.toml.orig
          sed "s/0\\.0\\.0/${EZKL_VERSION//v}/" Cargo.toml.orig >Cargo.toml
          mv Cargo.lock Cargo.lock.orig
          sed "s/0\\.0\\.0/${EZKL_VERSION//v}/" Cargo.lock.orig >Cargo.lock

      - name: Install required libraries
        shell: bash
        run: |
          sudo apt-get update && sudo apt-get install -y pkg-config libssl-dev

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          args: --release --out dist --features python-bindings

      - name: Install built wheel
        if: matrix.target == 'x86_64-unknown-linux-musl'
        uses: addnab/docker-run-action@v3
        with:
          image: alpine:latest
          options: -v ${{ github.workspace }}:/io -w /io
          run: |
            apk add py3-pip
            pip3 install -U pip
            pip3 install ezkl --no-index --find-links /io/dist/ --force-reinstall
            python3 -c "import ezkl"

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  musllinux-cross:
    runs-on: ubuntu-latest
    needs: ["build-release"]
    strategy:
      matrix:
        platform:
          - target: aarch64-unknown-linux-musl
            arch: aarch64
          - target: armv7-unknown-linux-musleabihf
            arch: armv7
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.7

      - name: Get release version from tag
        shell: bash
        run: |
          echo "EZKL_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "version is: ${{ env.EZKL_VERSION }}"
  
      - name: Set Cargo.toml version to match github tag
        shell: bash
        run: |
          mv Cargo.toml Cargo.toml.orig
          sed "s/0\\.0\\.0/${EZKL_VERSION//v}/" Cargo.toml.orig >Cargo.toml
          mv Cargo.lock Cargo.lock.orig
          sed "s/0\\.0\\.0/${EZKL_VERSION//v}/" Cargo.lock.orig >Cargo.lock

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          manylinux: musllinux_1_2
          args: --release --out dist --features python-bindings

      - uses: uraimo/run-on-arch-action@v2.5.0
        name: Install built wheel
        with:
          arch: ${{ matrix.platform.arch }}
          distro: alpine_latest
          githubToken: ${{ github.token }}
          install: |
            apk add py3-pip
            pip3 install -U pip
          run: |
            pip3 install ezkl --no-index --find-links dist/ --force-reinstall
            python3 -c "import ezkl"

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  pypi-publish:
    name: Uploads release to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    if: "startsWith(github.ref, 'refs/tags/')"
    # TODO: Uncomment if linux-cross is working
    # needs: [ macos, windows, linux, linux-cross, musllinux, musllinux-cross ]
    needs: [macos, windows, linux, musllinux, musllinux-cross]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: List Files
        run: ls -R

      # Both publish steps will fail if there is no trusted publisher setup
      # On failure the publish step will then simply continue to the next one

      # publishes to PyPI
      - name: Publish package distributions to PyPI
        continue-on-error: true
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: ./

      # publishes to TestPyPI
      - name: Publish package distribution to TestPyPI
        continue-on-error: true
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: ./

  # BUILD AND PUBLISH JS/WASM BINDINGS

  wasm-publish:
    name: publish-wasm-bindings
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2023-08-24
          override: true
          components: rustfmt, clippy
      - uses: jetli/wasm-pack-action@v0.4.0
      - name: Add wasm32-unknown-unknown target
        run: rustup target add wasm32-unknown-unknown

      - name: Install wasm-server-runner
        run: cargo install wasm-server-runner

      - name: Add rust-src
        run: rustup component add rust-src --toolchain nightly-2023-08-24-x86_64-unknown-linux-gnu
      - name: Install binaryen
        run: |
            set -e
            curl -L https://github.com/WebAssembly/binaryen/releases/download/version_116/binaryen-version_116-x86_64-linux.tar.gz | tar xzf -
            export PATH=$PATH:$PWD/binaryen-version_116/bin
            wasm-opt --version
      - name: Build wasm files for both web and nodejs compilation targets
        run: |
          wasm-pack build --release --target nodejs --out-dir ./pkg/nodejs . -- -Z build-std="panic_abort,std"
          wasm-pack build --release --target web --out-dir ./pkg/web . -- -Z build-std="panic_abort,std" --features web

      - name: Get release version from tag
        shell: bash
        run: |
          echo "EZKL_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "version is: ${{ env.EZKL_VERSION }}"

      - name: Create package.json in pkg folder
        shell: bash
        run: |
          echo '{
            "name": "@ezkljs/engine",
            "version": "${{ env.EZKL_VERSION }}",
            "dependencies": {
              "@types/json-bigint": "^1.0.1",
              "json-bigint": "^1.0.0"
            },
            "files": [
              "nodejs/ezkl_bg.wasm",
              "nodejs/ezkl.js",
              "nodejs/ezkl.d.ts",
              "nodejs/package.json",
              "nodejs/utils.js",
              "web/ezkl_bg.wasm",
              "web/ezkl.js",
              "web/ezkl.d.ts",
              "web/snippets/wasm-bindgen-rayon-7afa899f36665473/src/workerHelpers.js",
              "web/package.json",
              "web/utils.js",
              "ezkl.d.ts"
            ],
            "main": "nodejs/ezkl.js",
            "module": "web/ezkl.js",
            "types": "nodejs/ezkl.d.ts",
            "sideEffects": [
              "web/snippets/*"
            ]
          }' > pkg/package.json

      - name: Replace memory definition in nodejs
        run: |
          sed -i "3s|.*|imports['env'] = {memory: new WebAssembly.Memory({initial:20,maximum:65536,shared:true})}|" pkg/nodejs/ezkl.js

      - name: Add serialize and deserialize methods to nodejs bundle
        run: |
          echo '
          const JSONBig = require("json-bigint");

          function deserialize(buffer) { // buffer is a Uint8ClampedArray | Uint8Array // return a JSON object
            if (buffer instanceof Uint8ClampedArray) {
                buffer = new Uint8Array(buffer.buffer);
            }
            const string = new TextDecoder().decode(buffer);
            const jsonObject = JSONBig.parse(string);
            return jsonObject;
          }
          
          function serialize(data) { // data is an object // return a Uint8ClampedArray
            // Step 1: Stringify the Object with BigInt support
            if (typeof data === "object") {
                data = JSONBig.stringify(data);
            }
            // Step 2: Encode the JSON String
            const uint8Array = new TextEncoder().encode(data);
          
            // Step 3: Convert to Uint8ClampedArray
            return new Uint8ClampedArray(uint8Array.buffer);
          }
          
          module.exports = {
            deserialize,
            serialize
          };
          ' > pkg/nodejs/utils.js
      - name: Add serialize and deserialize methods to web bundle
        run: |
          echo '
          import { parse, stringify } from "json-bigint";

          export function deserialize(buffer) { // buffer is a Uint8ClampedArray | Uint8Array // return a JSON object
            if (buffer instanceof Uint8ClampedArray) {
                buffer = new Uint8Array(buffer.buffer);
            }
            const string = new TextDecoder().decode(buffer);
            const jsonObject = parse(string);
            return jsonObject;
          }
          
          export function serialize(data) { // data is an object // return a Uint8ClampedArray
            // Step 1: Stringify the Object with BigInt support
            if (typeof data === "object") {
                data = stringify(data);
            }
            // Step 2: Encode the JSON String
            const uint8Array = new TextEncoder().encode(data);
          
            // Step 3: Convert to Uint8ClampedArray
            return new Uint8ClampedArray(uint8Array.buffer);
          }
          ' > pkg/web/utils.js
      - name: Expose serialize and deserialize imports in nodejs target
        run: |
          sed -i '53i// import serialize and deserialize from utils.js\nconst { serialize, deserialize } = require(`./utils.js`);\nmodule.exports.serialize = serialize;\nmodule.exports.deserialize = deserialize;' pkg/nodejs/ezkl.js
      - name: Expose serialize and deserialize imports in web target
        run: |
          sed -i '51i\
          // import serialize and deserialize from utils.js\
          import { serialize, deserialize } from '\''./utils.js'\'';\
          export { serialize, deserialize };' pkg/web/ezkl.js
      - name: Add serialize and deserialize imports to nodejs ezkl.d.ts
        run: |
          sed -i '1i\
          export declare function serialize(data: object | string): Uint8ClampedArray;\
          export declare function deserialize(buffer: Uint8ClampedArray | Uint8Array): any;' pkg/nodejs/ezkl.d.ts

      - name: Add serialize and deserialize imports to web ezkl.d.ts
        run: |
          sed -i '1i\
          export declare function serialize(data: object | string): Uint8ClampedArray;\
          export declare function deserialize(buffer: Uint8ClampedArray | Uint8Array): any;' pkg/web/ezkl.d.ts

      - name: Create README.md in pkg folder
        run: |
          curl -s "https://raw.githubusercontent.com/zkonduit/ezkljs-engine/main/README.md" > ./pkg/README.md

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.12.1"
          registry-url: "https://registry.npmjs.org"
      - name: Publish to npm
        run: |
          cd pkg
          npm install
          npm ci
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        